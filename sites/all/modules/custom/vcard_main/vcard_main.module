<?php
/**
 * @file
 * Module's main file.
 */

$path = drupal_get_path('module', 'vcard_main');
require_once $path . '/my_vcards.inc';
require_once $path . '/groups.inc';
require_once $path . '/history.inc';
require_once $path . '/settings.inc';
require_once $path . '/user.inc';

/**
 * Implements hook_menu().
 */
function vcard_main_menu() {
  $items = [];

  $items['my-vcards'] = [
    'title' => 'My VCards',
    'title callback' => 'vcard_main_my_vcards_title',
    'menu_name' => 'main-menu',
    'page callback' => '_entity_page',
    'page arguments' => ['vcard'],
    'access callback' => TRUE,
  ];
  $items['my-vcards/add'] = [
    'title' => 'Add VCard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form'],
    'access arguments' => ['create entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['ajax/vcard/%/view'] = [
    'page callback' => 'vcard_main_vcard_view_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['view entities'],
    'delivery callback' => 'vcard_main_entity_ajax_callback',
  ];
  $items['my-vcards/%/%'] = [
    'title callback' => 'vcard_main_my_vcard_form_edit_title',
    'title arguments' => [2],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form', 1, 2],
    'access callback' => 'user_access',
    'access arguments' => ['edit own entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['my-vcards/%/remove'] = [
    'title' => 'Remove VCard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form_remove', 1],
    'access arguments' => ['delete own entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['groups'] = [
    'title' => 'Groups',
    'menu_name' => 'main-menu',
    'page callback' => '_entity_page',
    'page arguments' => ['group'],
    'access arguments' => ['view entities'],
  ];
  $items['group/add'] = [
    'title' => 'Add group',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_group_form'],
    'access arguments' => ['create entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['group/add/%ctools_js'] = [
    'page callback' => 'vcard_main_group_add_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['create entity'],
  ];
  $items['ajax/group/%/view'] = [
    'page callback' => 'vcard_main_group_view_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['view entities'],
    'delivery callback' => 'vcard_main_entity_ajax_callback',
  ];
  $items['ajax/group/%/credits'] = [
    'page callback' => 'vcard_main_group_credits_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['view entities'],
  ];
  $items['group/edit/%/%ctools_js'] = [
    'page callback' => 'vcard_main_group_edit_ajax',
    'page arguments' => [2, 3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['edit own entity'],
  ];
  $items['group/delete/%/%ctools_js'] = [
    'page callback' => 'vcard_main_group_remove_ajax',
    'page arguments' => [2, 3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['delete own entity'],
  ];
  $items['group/manage-contacts/%/%ctools_js'] = [
    'page callback' => 'vcard_main_group_manage_contacts_ajax',
    'page arguments' => [2, 3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['edit own entity'],
  ];
  $items['history'] = [
    'title' => 'History',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_history_form'],
    'access arguments' => ['access content'],
  ];
  $items['settings'] = [
    'title' => 'Settings',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_settings_form'],
    'access arguments' => ['access content'],
  ];
  $items['logout'] = [
    'title' => 'Log Out',
    'menu_name' => 'main-menu',
    'page callback' => 'vcard_main_logout',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function vcard_main_theme($existing, $type, $theme, $path) {
  $templates = drupal_get_path('theme', 'vcard') . '/templates';
  return [
    'entity_nano_teaser' => [
      'variables' => [
        'entity_type' => NULL,
        'entity_id' => NULL,
        'logo_uri' => NULL,
        'title' => NULL,
      ],
      'path' => $templates,
      'template' => 'entity-nano-teaser',
    ],
    'vcard_details_view' => [
      'variables' => [
        'vcard_entity' => NULL,
      ],
      'path' => $templates,
      'template' => 'vcard-details-view',
    ],
    'my_vcard_form' => [
      'render element' => 'form',
      'template' => 'my-vcard-form',
      'path' => $templates,
    ],
    'group_details_view' => [
      'variables' => [
        'group' => NULL,
      ],
      'path' => $templates,
      'template' => 'group-details-view',
    ],
  ];
}

/**
 * Helper function provides two columns on page.
 */
function _entity_page($entity_type = NULL) {
  if (!$entity_type) {
    return FALSE;
  }

  global $user;
  $page = [];

  // Return void for anonymous user.
  // This page will display an authorization form.
  if (!$user->uid) {
    return $page;
  }

  // Left column.
  $page['entity_list_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['list-wrapper', 'large-4', 'medium-4', 'columns'],
    ],
  ];
  $page['entity_list_wrapper']['nano'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano'],
    ],
  ];
  $page['entity_list_wrapper']['nano']['entity_list'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano-content'],
    ],
  ];

  //  Right column.
  $page['entity_view_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['entity-view-wrapper', 'large-8', 'medium-8', 'columns'],
    ],
  ];
  $page['entity_view_wrapper']['nano'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano'],
    ],
  ];
  $page['entity_view_wrapper']['nano']['content'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano-content'],
    ],
  ];

  $user_wrapper = entity_metadata_wrapper('user', $user);

  switch ($entity_type) {
    case 'vcard' :
      _vcard_attach_page_content($page, $user_wrapper);
      break;

    case 'group':
      _groups_attach_page_content($page, $user_wrapper);
      break;
  }

  $page['#attached'] = [
    'js' => [
      drupal_get_path('theme', 'vcard') . '/js/entity_view_ajax_load.js',
    ],
  ];

  return $page;
}

/**
 * Html deliver for view Entities.
 *
 * @param $page_callback_result
 */
function vcard_main_entity_ajax_callback($page_callback_result) {
  print $page_callback_result;
  drupal_page_footer();
}

/**
 * Helper function save relations to user entity field.
 *
 * @param $field_name
 *  Entity reference field name in user entity.
 * @param $entity_id
 *  ECK entity "id".
 */
function _user_entityreference_field_save($field_name, $entity_id) {
  global $user;
  $wrapper = entity_metadata_wrapper('user', $user);

  if (isset($wrapper->{$field_name})) {
    $entity_field = $wrapper->{$field_name}->value();
    $ids = [];
    foreach ($entity_field as $key => $item) {
      // Remove ids of referenced entities that has been deleted.
      if (!$item) {
        unset($wrapper->{$field_name}[$key]);
      }
      else {
        $ids[] = $item->id;
      }
    }
    // Save if new VCard created.
    if (!in_array($entity_id, $ids)) {
      $wrapper->{$field_name}[] = intval($entity_id);
    }
  }
  else {
    watchdog(
      'error',
      t('Field @field_name does not exists for user.', ['@field_name' => $field_name])
    );
  }
  $wrapper->save();
}

/**
 * Implements hook_block_info().
 */
function vcard_main_block_info() {
  $blocks = [];

  $blocks['my_vcards_toolbar'] = [
    'info' => t('My VCards toolbar'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => TRUE,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'my-vcards',
  ];
  $blocks['groups_toolbar'] = [
    'info' => t('Groups toolbar'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => TRUE,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'groups',
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function vcard_main_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'my_vcards_toolbar':
    case 'groups_toolbar':
      $block['content'] = ' ';
      break;
  }

  return $block;
}

/**
 * Home page title callback.
 */
function vcard_main_my_vcards_title() {
  global $user;

  return $user->uid ? t('My VCards') : t('Authorization');
}

/**
 * Implements hook_entity_info_alter().
 */
function vcard_main_entity_info_alter(&$entity_info) {
  // Custom controllers.
  $entity_info['group']['controller class'] = 'GroupEntityController';
}

/**
 * Implements hook_form_alter().
 */
function vcard_main_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'views_exposed_form':
      $form['combine']['#attributes'] = ['placeholder' => t('Search')];
      $form['combine']['#title'] = '<i class="material-icons">search</i>';
      break;

    case 'vcard_main_my_vcard_form_remove':
    case 'vcard_main_group_remove_form':
      $form['actions']['cancel']['#attributes'] = [
        'class' => 'button',
      ];
      break;
  }
}

/**
 * Implements hook_schema_alter().
 */
function vcard_main_schema_alter(&$schema) {
  $schema['users']['fields']['changed'] = [
    'description' => 'The Unix timestamp when the user was most recently saved.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ];
}

/**
 * Implements hook_user_presave().
 */
function vcard_main_user_presave(&$edit, $account, $category) {
  if (isset($account->is_new) && $account->is_new) {
    $edit['name'] = $edit['mail'];
  }
  $edit['changed'] = time();
}

/**
 * Implements hook_permission().
 */
function vcard_main_permission() {
  return [
    'create entity' => [
      'title' => 'Add entity',
      'description' => 'Add VCard, Group etc',
    ],
    'view entities' => [
      'title' => 'View own entity list',
      'description' => 'View own VCards, Groups etc',
    ],
    'edit own entity' => [
      'title' => 'Edit own entity',
      'description' => 'Edit own VCard, Group etc',
    ],
    'delete own entity' => [
      'title' => 'Delete own entity',
      'description' => 'Delete own VCard, Group etc',
    ],
  ];
}

/**
 * Implements hook_user_default_permissions_alter().
 */
function vcard_main_user_default_permissions_alter(&$permissions) {
  $permissions['create entity'] = [
    'name' => 'create entity',
    'roles' => [
      'authenticated user' => 'authenticated user',
    ],
    'module' => 'vcard_main',
  ];
  $permissions['view entities'] = [
    'name' => 'view entities',
    'roles' => [
      'authenticated user' => 'authenticated user',
    ],
    'module' => 'vcard_main',
  ];
  $permissions['edit own entity'] = [
    'name' => 'edit own entity',
    'roles' => [
      'authenticated user' => 'authenticated user',
    ],
    'module' => 'vcard_main',
  ];
  $permissions['delete own entity'] = [
    'name' => 'delete own entity',
    'roles' => [
      'authenticated user' => 'authenticated user',
    ],
    'module' => 'vcard_main',
  ];
}
