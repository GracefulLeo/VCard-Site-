<?php
/**
 * @file
 * Module's main file.
 */

/**
 * Implements hook_menu().
 */
function vcard_main_menu() {
  $items = [];
  $weight = 1;

  $items['my-vcards/add'] = [
    'title' => 'Add VCard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form'],
    'access arguments' => ['create vcard content'],
  ];
  $items['my-vcards/%/%'] = [
    'title callback' => 'vcard_main_my_vcard_form_edit_title',
    'title arguments' => [2],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form', 1, 2],
    'access callback' => 'user_access',
    'access arguments' => ['edit own vcard content'],
  ];
  $items['my-vcards/%/remove'] = [
    'title' => 'Remove VCard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form_remove', 1],
    'access arguments' => ['delete own vcard content'],
  ];
  $items['groups'] = [
    'title' => 'Groups',
    'menu_name' => 'main-menu',
    'weight' => $weight++,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_groups_form'],
    'access arguments' => ['access content'],
  ];
  $items['history'] = [
    'title' => 'History',
    'menu_name' => 'main-menu',
    'weight' => $weight++,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_history_form'],
    'access arguments' => ['access content'],
  ];
  $items['logout'] = [
    'title' => 'Log Out',
    'menu_name' => 'main-menu',
    'weight' => $weight++,
    'page callback' => 'vcard_main_logout',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Page callback for add, edit and clone VCards.
 *
 * @param $form
 * @param $form_state
 * @param integer|null $id
 *  VCard existing entity id.
 * @param string|null $op
 *  'edit'
 *  'clone'
 *
 * @return mixed
 */
function vcard_main_my_vcard_form($form, &$form_state, $id = NULL, $op = NULL) {
  global $user;

  // Show elements for authorized users only.
  if ($user->uid) {
    $user_entity = entity_load_single('user', $user->uid);

    if (is_numeric($id)) {
      $vcard_node = node_load($id);
      if ($user->name !== $vcard_node->name) {
        drupal_not_found();
        drupal_exit();
      }
      if ($op == 'clone') {
        $vcard_node = clone $vcard_node;
        $vcard_node->is_new = TRUE;
        unset($vcard_node->nid);
        unset($vcard_node->vid);
      }
    }
    else {
      $values = [
        'type' => 'vcard',
        'uid' => $user->uid,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
      ];
      $vcard_node = entity_create('node', $values);
    }

    field_attach_form('node', $vcard_node, $form, $form_state);

    $form['node'] = [
      '#type' => 'value',
      '#value' => $vcard_node,
    ];
    $form['user_entity'] = [
      '#type' => 'value',
      '#value' => $user_entity,
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 100,
      '#attributes' => [
        'id' => 'my-vcard-form-submit',
      ],
    ];

    $form['#validate'][] = 'vcard_main_my_vcard_form_validation';
    $form['#submit'][] = 'vcard_main_my_vcard_form_submit';
  }

  return $form;
}

/**
 * "My VCard" page form validation.
 */
function vcard_main_my_vcard_form_validation($form, &$form_state) {
  node_validate($form_state['values']['node'], $form, $form_state);
}

/**
 * "My VCard" page form submit.
 */
function vcard_main_my_vcard_form_submit($form, &$form_state) {
  // Save VCard entity.
  $vcard_node = $form_state['values']['node'];
  field_attach_submit('node', $vcard_node, $form, $form_state);
  $vcard_node = node_submit($vcard_node);
  node_save($vcard_node);

  // Set surname, name and middle name as node title.
  $vcard_wrapper = entity_metadata_wrapper('node', $vcard_node);
  $title = $vcard_wrapper->field_surname->value() . ' ' . $vcard_wrapper->field_name->value();
  if (!empty($vcard_wrapper->field_middle_name)) {
    $title .= ' ' . $vcard_wrapper->field_middle_name->value();
  }
  $vcard_wrapper->title->set($title);
  $vcard_wrapper->save();


  // Save relations to user.
  $user = $form_state['values']['user_entity'];
  $wrapper = entity_metadata_wrapper('user', $user);
  if (isset($wrapper->field_my_vcards)) {
    $vcard_field = $wrapper->field_my_vcards->value();
    $ids = [];
    foreach ($vcard_field as $key => $item) {
      // Remove ids of referenced nodes that has been deleted.
      if (!$item) {
        unset($wrapper->field_my_vcards[$key]);
      }
      $ids[] = $item->nid;
    }
    // Save if new VCard created.
    if (!in_array($vcard_node->nid, $ids)) {
      $wrapper->field_my_vcards[] = intval($vcard_node->nid);
    }
  }
  else {
    watchdog('error', t('Field \'vcard\' does not exists for user.'));
  }
  $wrapper->save();

  // @todo Write good message.
  drupal_set_message(t('Your visit card successfully saved!'));
  drupal_goto('<front>');
}

/**
 * Page callback for deleting VCards.
 */
function vcard_main_my_vcard_form_remove($form, &$form_state, $id) {
  global $user;

  $wrapper = entity_metadata_wrapper('node', $id);

  if ($user->name !== $wrapper->value()->name) {
    drupal_not_found();
    drupal_exit();
  }

  $src = $wrapper->field_json->value();

  $form['image'] = [
    '#type' => 'item',
    '#markup' => '<img src="' . $src . '" class="vcard-rendered" />',
  ];

  $form['id'] = [
    '#type' => 'value',
    '#value' => $id,
  ];
  return confirm_form(
    $form,
    t('Are you sure to delete the VCard?'),
    '<front>',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * VCard remove form submit.
 */
function vcard_main_my_vcard_form_remove_submit($form, &$form_state) {
  global $user;

  if ($form_state['values']['confirm']) {
    $id = $form_state['values']['id'];

    // Remove relations from "user" first.
    $wrapper = entity_metadata_wrapper('user', $user);
    foreach ($wrapper->field_my_vcards->value() as $key => $item) {
      if ($item->nid == $id) {
        $wrapper->field_my_vcards[$key]->set(NULL);
        break;
      }
    }
    $wrapper->save();

    // Remove vcard entity.
    node_delete($id);
  }

  $form_state['redirect'] = '<front>';
}

/**
 * "Groups" page callback.
 */
function vcard_main_groups_form($form, &$form_state) {
  return $form;
}

/**
 * "History" page callback.
 */
function vcard_main_history_form($form, &$form_state) {
  return $form;
}

/**
 * "Log Out" page callback.
 */
function vcard_main_logout() {
  module_load_include('inc', 'user', 'user.pages');
  user_logout();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vcard_main_form_user_login_block_alter(&$form, &$form_state) {
  $form['name']['#title_display'] = 'invisible';
  $form['name']['#attributes'] = ['placeholder' => t('E-mail')];
  $form['pass']['#title_display'] = 'invisible';
  $form['pass']['#attributes'] = ['placeholder' => t('Password')];
}

/**
 * Implements hook_block_view_alter().
 */
function vcard_main_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'login':
      // Remove unnecessary title.
      unset($data['subject']);
      // Set link after "Log in" button.
      $data['content']['links']['#weight'] = 101;
      // Hide unnecessary links.
      $data['content']['links']['#access'] = FALSE;
      // Set google button on the top of block.
      $data['content']['submit_google']['#weight'] = -1;
      break;
  }
}

/**
 * Title callback for My VCard operations.
 *
 * @param $op
 *  Edit or Clone.
 *
 * @return string
 */
function vcard_main_my_vcard_form_edit_title($op) {
  return t('@op VCard', ['@op' => $op == 'edit' ? 'Edit' : 'Add']);
}

/**
 * Implements hook_page_alter().
 */
function vcard_main_page_alter(&$page) {
  global $user;

  // Show elements for authorized users only.
  if ($user->uid) {
    $user_entity = entity_load_single('user', $user->uid);
    // If new user hasn't any VCard show hint.
    if (arg(1) != 'add' && empty($user_entity->field_my_vcards)) {
      $message = t(
        'Hint: To start using this service you need to fill some fields in your profile. Add <a href="@my_vcard">My first VCard</a>.',
        ['@my_vcard' => url('my-vcards/add')]
      );

      $page['content']['hint'] = [
        '#markup' => '
            <div class="hint-outer">
                <div class="hint-inner">
                    <p>' . $message . '</p>
                    <div class="hint-bottom-triangle"></div>
                </div>
            </div>
        ',
      ];

      $this_module = drupal_get_path('module', 'vcard_main');
      $page['content']['hint']['#attached'] = [
        'css' => [
          "$this_module/css/hint.css",
        ],
        'js' => [
          "$this_module/js/hint.js",
        ],
      ];
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function vcard_main_views_pre_render(&$view) {
  switch ($view->name) {
    case 'my_vcards':
      if (!user_is_logged_in()) {
        $view->header = [];
      }
      break;
  }
}