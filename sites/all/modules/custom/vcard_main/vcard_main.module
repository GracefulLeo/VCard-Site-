<?php
/**
 * @file
 * Module's main file.
 */

$path = drupal_get_path('module', 'vcard_main');
require_once $path . '/my_vcards.inc';
require_once $path . '/groups.inc';
require_once $path . '/history.inc';
require_once $path . '/settings.inc';
require_once $path . '/user.inc';

/**
 * Implements hook_menu().
 */
function vcard_main_menu() {
  $items = [];

  $items['my-vcards'] = [
    'title' => 'My VCards',
    'title callback' => 'vcard_main_my_vcards_title',
    'menu_name' => 'main-menu',
    'page callback' => '_entity_page',
    'page arguments' => ['vcard'],
    'access callback' => TRUE,
  ];
  $items['my-vcards/add'] = [
    'title' => 'Add VCard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form'],
    'access arguments' => ['create entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['ajax/vcard/%/view'] = [
    'page callback' => 'vcard_main_vcard_view_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['view entities'],
    'delivery callback' => 'vcard_main_entity_ajax_callback',
  ];
  $items['my-vcards/%/%'] = [
    'title callback' => 'vcard_main_my_vcard_form_edit_title',
    'title arguments' => [2],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form', 1, 2],
    'access callback' => 'user_access',
    'access arguments' => ['edit own entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['my-vcards/%/remove'] = [
    'title' => 'Remove VCard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_my_vcard_form_remove', 1],
    'access arguments' => ['delete own entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['groups'] = [
    'title' => 'Groups',
    'menu_name' => 'main-menu',
    'page callback' => '_entity_page',
    'page arguments' => ['group'],
    'access arguments' => ['view entities'],
  ];
  $items['group/add'] = [
    'title' => 'Add group',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_group_form'],
    'access arguments' => ['create entity'],
    'type' => MENU_CALLBACK,
  ];
  $items['group/add/%ctools_js'] = [
    'page callback' => 'vcard_main_group_add_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['create entity'],
  ];
  $items['group/edit/%/%ctools_js'] = [
    'page callback' => 'vcard_main_group_edit_ajax',
    'page arguments' => [2, 3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['edit own entity'],
  ];
  $items['group/delete/%/%ctools_js'] = [
    'page callback' => 'vcard_main_group_remove_ajax',
    'page arguments' => [2, 3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['delete own entity'],
  ];
  $items['group/manage-contacts/%/%ctools_js'] = [
    'page callback' => 'vcard_main_group_manage_contacts_ajax',
    'page arguments' => [2, 3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['edit own entity'],
  ];
  $items['history'] = [
    'title' => 'History',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_history_form'],
    'access arguments' => ['access content'],
  ];
  $items['settings'] = [
    'title' => 'Settings',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['vcard_main_settings_form'],
    'access arguments' => ['access content'],
  ];
  $items['logout'] = [
    'title' => 'Log Out',
    'menu_name' => 'main-menu',
    'page callback' => 'vcard_main_logout',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function vcard_main_theme($existing, $type, $theme, $path) {
  $templates = drupal_get_path('theme', 'vcard') . '/templates';
  return [
    'entity_nano_teaser' => [
      'variables' => [
        'entity_id' => NULL,
        'logo_uri' => NULL,
        'title' => NULL,
      ],
      'path' => $templates,
      'template' => 'entity-nano-teaser',
    ],
    'vcard_details_view' => [
      'variables' => [
        'vcard' => NULL,
      ],
      'path' => $templates,
      'template' => 'vcard-details-view',
    ],
    'my_vcard_form' => [
      'render element' => 'form',
      'template' => 'my-vcard-form',
      'path' => $templates,
    ],
    'group_details_view' => [
      'variables' => [
        'group' => NULL,
      ],
      'path' => $templates,
      'template' => 'group-details-view',
    ],
    'toolbar_vcard' => [
      'variables' => [
        'entity_id' => NULL,
      ],
      'path' => $templates,
      'template' => 'toolbar-vcard',
    ],
    'toolbar_group' => [
      'variables' => [
        'entity_id' => NULL,
        'title' => NULL,
        'description' => NULL,
      ],
      'path' => $templates,
      'template' => 'toolbar-group',
    ],
  ];
}

/**
 * Helper function provides two columns on page.
 */
function _entity_page($entity_type = NULL) {
  if (!$entity_type) {
    return FALSE;
  }

  global $user;
  $page = [];

  // Return void for anonymous user.
  // This page will display an authorization form.
  if (!$user->uid) {
    return $page;
  }

  // Left column.
  $page['entity_list_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['list-wrapper', 'large-4', 'medium-4', 'columns'],
    ],
  ];
  $page['entity_list_wrapper']['nano'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano'],
    ],
  ];
  $page['entity_list_wrapper']['nano']['entity_list'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano-content'],
    ],
  ];

  //  Right column.
  $page['entity_view_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['entity-view-wrapper', 'large-8', 'medium-8', 'columns'],
    ],
  ];
  $page['entity_view_wrapper']['nano'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano'],
    ],
  ];
  $page['entity_view_wrapper']['nano']['content'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['nano-content'],
    ],
  ];
  $page['entity_view_wrapper']['nano']['content']['view'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => 'entity-view-ajax-loaded',
    ],
  ];

  $user_wrapper = entity_metadata_wrapper('user', $user);

  switch ($entity_type) {
    case 'vcard' :
      _vcard_attach_page_content($page, $user_wrapper);
      break;

    case 'group':
      _groups_attach_page_content($page, $user_wrapper);
      break;
  }

  $page['#attached'] = [
    'js' => [
      drupal_get_path('theme', 'vcard') . '/js/entity_view.js',
    ],
  ];

  return $page;
}

/**
 * Build form with item list for VCards, Groups and same entities.
 *
 * @param $form
 * @param $form_state
 * @param null $entity_reference_field_values
 *  Array of entities from user's entity reference fields.
 *
 * @return mixed
 */
function vcard_main_build_list_items_form($form, &$form_state, $entity_reference_field_values = NULL) {
  if (!empty($entity_reference_field_values)) {
    $entity_type = end($entity_reference_field_values)->type;

    // Sort by "changed", newest first.
    $sorted = [];
    foreach ($entity_reference_field_values as $key => $entity) {
      $sorted[$entity->changed] = $key;
    }
    krsort($sorted);

    $options = [];
    foreach ($sorted as $key) {
      $logo_uri = '';
      if (!empty($entity_reference_field_values[$key]->field_logotype)) {
        $logo_uri = $entity_reference_field_values[$key]->field_logotype[LANGUAGE_NONE][0]['uri'];
      }

      try {
        $title = '';
        switch ($entity_type) {
          case 'vcard':
            $title = $entity_reference_field_values[$key]->title;
            break;

          case 'group':
            $title = $entity_reference_field_values[$key]->name;
            break;
        }

        $options[$entity_reference_field_values[$key]->id] = theme('entity_nano_teaser', [
          'logo_uri' => $logo_uri,
          'title' => $title,
        ]);
      } catch (Exception $e) {
        watchdog('theme', 'entity_nano_teaser error: @e', ['@e' => $e]);
      }
    }

    $form['entities'] = [
      '#type' => 'radios',
      '#options' => $options,
      '#ajax' => [
        'callback' => 'vcard_main_entity_view_ajax_callback',
        'wrapper' => 'entity-view-ajax-loaded',
        'progress' => FALSE,
      ],
    ];
    $form['entity_type'] = [
      '#type' => 'value',
      '#value' => $entity_type,
    ];
  }

  return $form;
}

/**
 * Ajax callback render entity view on right column and update toolbar.
 *
 * @param $form
 * @param $form_state
 *
 * @return array|string
 */
function vcard_main_entity_view_ajax_callback($form, $form_state) {
  $id = $form_state['values']['entities'];
  $entity_type = $form_state['values']['entity_type'];

  if (is_numeric($id)) {
    $entity = entity_load_single($entity_type, $id);

    $render = '';
    try {
      $render = theme("{$entity_type}_details_view", [$entity_type => $entity]);
    } catch (Exception $e) {
      watchdog('vcard_main_entity_view_ajax_callback', '<pre>@e</pre>', ['@e' => print_r($e, TRUE)]);
    }

    $toolbar = '';
    try {
      switch ($entity_type) {
        case 'vcard':
          $toolbar = theme("toolbar_{$entity_type}", ['entity_id' => $id]);
          break;

        case 'group':
          $toolbar = theme("toolbar_{$entity_type}", [
            'entity_id' => $id,
            'title' => $entity->name,
            'description' => $entity->description,
          ]);
          break;
      }
    } catch (Exception $e) {
      watchdog('toolbar theme', '<pre>@e</pre>', ['@e' => print_r($e, TRUE)]);
    }

    $commands = [];
    $commands[] = ajax_command_replace('#entity-view-ajax-loaded', '<div id="entity-view-ajax-loaded">' . $render . '</div>');
    $commands[] = ajax_command_replace('#toolbar', '<section class="row" id="toolbar">' . $toolbar . '</section>');

    return [
      '#type' => 'ajax',
      '#commands' => $commands,
    ];
  }

  return '<div id="entity-view-ajax-loaded"></div>';
}

/**
 * Html deliver for view Entities.
 *
 * @param $page_callback_result
 */
function vcard_main_entity_ajax_callback($page_callback_result) {
  print $page_callback_result;
  drupal_page_footer();
}

/**
 * Helper function save relations to user entity field.
 *
 * @param $field_name
 *  Entity reference field name in user entity.
 * @param $entity_id
 *  ECK entity "id".
 */
function _user_entityreference_field_save($field_name, $entity_id) {
  global $user;
  $wrapper = entity_metadata_wrapper('user', $user);

  if (isset($wrapper->{$field_name})) {
    $entity_field = $wrapper->{$field_name}->value();
    $ids = [];
    foreach ($entity_field as $key => $item) {
      // Remove ids of referenced entities that has been deleted.
      if (!$item) {
        unset($wrapper->{$field_name}[$key]);
      }
      else {
        $ids[] = $item->id;
      }
    }
    // Save if new VCard created.
    if (!in_array($entity_id, $ids)) {
      $wrapper->{$field_name}[] = intval($entity_id);
    }
  }
  else {
    watchdog(
      'error',
      t('Field @field_name does not exists for user.', ['@field_name' => $field_name])
    );
  }
  $wrapper->save();
}

/**
 * Helper function creates textfields with default values from entity.
 *
 * @param $form
 * @param $entity
 *  VCard, Group etc.
 * @param array $properties
 *  array($property => $placeholder, ...)
 */
function _form_build_properties(&$form, $entity, $properties) {
  $weight = 0;
  foreach ($properties as $property => $placeholder) {
    $form[$property] = [
      '#type' => 'textfield',
      '#default_value' => isset($entity->{$property}) ? $entity->{$property} : '',
      '#attributes' => [
        'placeholder' => $placeholder,
      ],
      '#weight' => $weight++,
    ];
  }
}

/**
 * Implements hook_block_info_alter().
 */
function vcard_main_block_info_alter(&$blocks, $theme, $code_blocks) {
  switch ($theme) {
    case VCARD_THEME_NAME:
      $blocks['views']['-exp-contacts-page']['status'] = TRUE;
      $blocks['views']['-exp-contacts-page']['region'] = 'header';
      $blocks['views']['-exp-contacts-page']['visibility'] = BLOCK_VISIBILITY_LISTED;
      $blocks['views']['-exp-contacts-page']['pages'] = 'contacts';
      break;
  }
}

/**
 * Home page title callback.
 */
function vcard_main_my_vcards_title() {
  global $user;

  return $user->uid ? t('My VCards') : t('Authorization');
}

/**
 * Implements hook_entity_info_alter().
 */
function vcard_main_entity_info_alter(&$entity_info) {
  // Custom controllers.
  $entity_info['group']['controller class'] = 'GroupEntityController';
}

/**
 * Implements hook_form_alter().
 */
function vcard_main_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'views_exposed_form':
      $form['combine']['#attributes'] = ['placeholder' => t('Search')];
      $form['combine']['#title'] = '<i class="material-icons">search</i>';
      break;

    case 'vcard_main_my_vcard_form_remove':
    case 'vcard_main_group_remove_form':
      $form['actions']['cancel']['#attributes'] = [
        'class' => 'button',
      ];
      break;
  }
}

/**
 * Implements hook_permission().
 */
function vcard_main_permission() {
  return [
    'create entity' => [
      'title' => 'Add entity',
      'description' => 'Add VCard, Group etc',
    ],
    'view entities' => [
      'title' => 'View own entity list',
      'description' => 'View own VCards, Groups etc',
    ],
    'edit own entity' => [
      'title' => 'Edit own entity',
      'description' => 'Edit own VCard, Group etc',
    ],
    'delete own entity' => [
      'title' => 'Delete own entity',
      'description' => 'Delete own VCard, Group etc',
    ],
  ];
}

/**
 * Generate UUID.
 *
 * @return string
 */
function generate_uuid() {
  try {
    $data = random_bytes(16);
    $data[6] = chr(ord($data[6]) & 0x0f | 0x40);
    $data[8] = chr(ord($data[8]) & 0x3f | 0x80);

    return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
  } catch (Exception $_) {
    return '';
  }
}

/**
 * Check has UUID valid format.
 *
 * @param $uuid
 *
 * @return bool
 */
function _uuid_is_valid($uuid) {
  return preg_match('/^\{?[0-9a-f]{8}\-?[0-9a-f]{4}\-?[0-9a-f]{4}\-?' .
      '[0-9a-f]{4}\-?[0-9a-f]{12}\}?$/i', $uuid) === 1;
}
